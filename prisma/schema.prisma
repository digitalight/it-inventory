generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Laptop {
  id                String                    @id @default(uuid())
  make              String
  model             String
  serialNumber      String                    @unique
  status            String                    @default("Available")
  assignedToId      String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  returnDate        DateTime?
  deviceName        String?
  assignedTo        Staff?                    @relation(fields: [assignedToId], references: [id])
  assignmentHistory LaptopAssignmentHistory[]
  statusHistory     LaptopStatusHistory[]
}

model Staff {
  id                String                    @id @default(uuid())
  email             String                    @unique
  firstname         String
  lastname          String
  department        String?
  isteacher         Boolean
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  startDate         DateTime                  @default(now())
  leavingDate       DateTime?
  laptops           Laptop[]
  assignmentHistory LaptopAssignmentHistory[]
}

model LaptopStatusHistory {
  id         String   @id @default(uuid())
  laptopId   String
  fromStatus String?
  toStatus   String
  reason     String?
  changedBy  String?
  changedAt  DateTime @default(now())
  notes      String?
  laptop     Laptop   @relation(fields: [laptopId], references: [id], onDelete: Cascade)
}

model LaptopAssignmentHistory {
  id           String    @id @default(uuid())
  laptopId     String
  staffId      String?
  assignedAt   DateTime  @default(now())
  unassignedAt DateTime?
  reason       String?
  assignedBy   String?
  notes        String?
  staff        Staff?    @relation(fields: [staffId], references: [id])
  laptop       Laptop    @relation(fields: [laptopId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parts       Part[]
}

model Part {
  id            String             @id @default(uuid())
  name          String
  description   String?
  categoryId    String
  stockLevel    Int                @default(0)
  minStockLevel Int                @default(0)
  location      String?
  partNumber    String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  category      Category           @relation(fields: [categoryId], references: [id])
  stockHistory  PartStockHistory[]
}

model PartStockHistory {
  id            String   @id @default(uuid())
  partId        String
  changeType    String
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?
  changedBy     String?
  changedAt     DateTime @default(now())
  notes         String?
  part          Part     @relation(fields: [partId], references: [id], onDelete: Cascade)
}

model Supplier {
  id          String   @id @default(uuid())
  name        String   @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  website     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Order {
  id           String          @id @default(uuid())
  name         String
  supplierId   String
  status       String          @default("Request")
  requestedBy  String
  deliveryCost Float           @default(0)
  totalAmount  Float           @default(0)
  notes        String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deliveredAt  DateTime?
  supplier     Supplier        @relation(fields: [supplierId], references: [id])
  documents    OrderDocument[]
  items        OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  name       String
  quantity   Int      @default(1)
  unitPrice  Float    @default(0)
  totalPrice Float    @default(0)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderDocument {
  id           String   @id @default(uuid())
  orderId      String
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  documentType String   @default("Quote")
  uploadedBy   String?
  createdAt    DateTime @default(now())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
