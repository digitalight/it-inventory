// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Laptop {
  id           String    @id @default(uuid())
  make         String
  model        String
  serialNumber String    @unique // This is crucial for consistency!
  status       String    @default("Available") // "Available", "Assigned", "In Repair", "Retired", "Returned"
  assignedToId String?   // Foreign key to Staff
  assignedTo   Staff?    @relation(fields: [assignedToId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  returnDate   DateTime? // Optional: for offboarding planning
  
  // Audit trail relationships
  statusHistory LaptopStatusHistory[]
  assignmentHistory LaptopAssignmentHistory[]
}

model Staff {
  id           String   @id @default(uuid())
  email        String   @unique // Add email as unique identifier
  firstname    String
  lastname     String
  department   String?
  isteacher    Boolean
  laptops      Laptop[] // One-to-many relationship
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  startDate    DateTime  @default(now())
  leavingDate  DateTime?
  
  // Audit trail relationships
  assignmentHistory LaptopAssignmentHistory[]
}

// Audit table for laptop status changes
model LaptopStatusHistory {
  id          String   @id @default(uuid())
  laptopId    String
  laptop      Laptop   @relation(fields: [laptopId], references: [id], onDelete: Cascade)
  fromStatus  String?  // null for initial status
  toStatus    String
  reason      String?  // optional reason for status change
  changedBy   String?  // who made the change (could be email or name)
  changedAt   DateTime @default(now())
  notes       String?  // additional notes about the change
}

// Audit table for laptop assignments
model LaptopAssignmentHistory {
  id           String   @id @default(uuid())
  laptopId     String
  laptop       Laptop   @relation(fields: [laptopId], references: [id], onDelete: Cascade)
  staffId      String?  // null when unassigned
  staff        Staff?   @relation(fields: [staffId], references: [id], onDelete: SetNull)
  assignedAt   DateTime @default(now())
  unassignedAt DateTime? // null if currently assigned
  reason       String?  // reason for assignment/unassignment
  assignedBy   String?  // who made the assignment
  notes        String?  // additional notes
}

// Parts inventory system
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  parts       Part[]
}

model Part {
  id           String   @id @default(uuid())
  name         String
  description  String?
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  stockLevel   Int      @default(0)
  minStockLevel Int     @default(0) // Alert when stock goes below this
  location     String?  // Where the part is stored
  partNumber   String?  // Manufacturer part number
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Audit trail
  stockHistory PartStockHistory[]
}

// Audit table for part stock changes
model PartStockHistory {
  id          String   @id @default(uuid())
  partId      String
  part        Part     @relation(fields: [partId], references: [id], onDelete: Cascade)
  changeType  String   // "IN", "OUT", "ADJUSTMENT"
  quantity    Int      // positive for additions, negative for removals
  previousStock Int
  newStock    Int
  reason      String?  // reason for stock change
  changedBy   String?  // who made the change
  changedAt   DateTime @default(now())
  notes       String?  // additional notes
}